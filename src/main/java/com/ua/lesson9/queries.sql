INSERT INTO USERS (USERNAME, PASSWORD, IS_AUTHORIZED)
VALUES ('max', 'max', true);

UPDATE USERS
SET USERNAME = 'alex'
WHERE ID = 8;

DELETE
FROM USERS
WHERE ID = 3;

DROP TABLE USERS;

TRUNCATE USERS;

SELECT *
FROM USERS
ORDER BY ID DESC;


ALTER TABLE USERS
    ADD CONSTRAINT PK_USERS
        PRIMARY KEY (ID);

ALTER TABLE DATA
    ADD CONSTRAINT FK_USERS_DATA
        FOREIGN KEY (USER_ID)
            REFERENCES USERS (ID);

SELECT * FROM USERS INNER JOIN DATA ON USERS.ID = DATA.USER_ID;

SELECT * FROM USERS WHERE ID IN (SELECT USER_ID FROM DATA WHERE ID = 2);


ALTER TABLE DATA
    ADD CONSTRAINT CHECK_AGE CHECK (AGE > 0);

CREATE TABLE NEW_TABLE (
                           ID BIGINT PRIMARY KEY,
                           AGE BIGINT CONSTRAINT CHECK_AGE2 CHECK (AGE > 8)
);


CREATE TABLE STUDENTS (
                          ID SERIAL PRIMARY KEY,
                          NAME VARCHAR(45)
);

CREATE TABLE COURSES (
                         ID SERIAL PRIMARY KEY,
                         COURSE_NAME VARCHAR(100)
);

CREATE TABLE STUDENT_COURSE (
                                STUDENT_ID INT REFERENCES STUDENTS(ID),
                                COURSE_ID INT REFERENCES COURSES(ID),
                                PRIMARY KEY (STUDENT_ID, COURSE_ID)
);

INSERT INTO STUDENTS (NAME) VALUES ('JOHN'), ('ALEX'), ('OLEG');
INSERT INTO COURSES (COURSE_NAME) VALUES ('PHYTON'), ('JAVA'), ('C++');

SELECT * FROM STUDENTS;
SELECT * FROM COURSES;

INSERT INTO STUDENT_COURSE (STUDENT_ID, COURSE_ID) VALUES (1, 2), (1, 1);
SELECT * FROM STUDENT_COURSE;

SELECT S.NAME, C.COURSE_NAME FROM STUDENTS S
                                      INNER JOIN STUDENT_COURSE SC ON S.ID = SC.STUDENT_ID
                                      INNER JOIN COURSES C ON SC.COURSE_ID = C.ID;

INSERT INTO STUDENT_COURSE (STUDENT_ID, COURSE_ID) VALUES (2, 3), (2, 2);



